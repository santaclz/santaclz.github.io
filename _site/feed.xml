<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-11-03T05:43:54+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">santaclz’s blog</title><subtitle>Vulnerability researcher&apos;s blog focusing on system internals,  reverse engineering and exploitation.</subtitle><entry><title type="html">Linux Kernel Exploitation</title><link href="http://localhost:4000/2023/11/03/Linux-Kernel-Exploitation.html" rel="alternate" type="text/html" title="Linux Kernel Exploitation" /><published>2023-11-03T00:00:00+01:00</published><updated>2023-11-03T00:00:00+01:00</updated><id>http://localhost:4000/2023/11/03/Linux-Kernel-Exploitation</id><content type="html" xml:base="http://localhost:4000/2023/11/03/Linux-Kernel-Exploitation.html">&lt;h1 id=&quot;content-coming-soon&quot;&gt;Content coming soon…&lt;/h1&gt;

&lt;p&gt;Below is a video of a talk I gave at BSidesLjubljana 2023.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://ia802709.us.archive.org/35/items/BSidesLjubljana2023/t1_06_Guide_To_Linux_Kernel_Exploitation-Ivor_Canjuga.mp4&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name></name></author><summary type="html">Content coming soon…</summary></entry><entry><title type="html">Getting started with Reverse Engineering</title><link href="http://localhost:4000/jekyll/update/2023/11/02/Getting-started-with-Reverse-Engineering.html" rel="alternate" type="text/html" title="Getting started with Reverse Engineering" /><published>2023-11-02T14:34:30+01:00</published><updated>2023-11-02T14:34:30+01:00</updated><id>http://localhost:4000/jekyll/update/2023/11/02/Getting-started-with-Reverse-Engineering</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/11/02/Getting-started-with-Reverse-Engineering.html">&lt;h1 id=&quot;how-it-started&quot;&gt;How it started&lt;/h1&gt;

&lt;p&gt;This is a blog post about how I started in the reverse engineering and exploit development field. It’s not a guide on how to get started; it’s just about my path and experience. The year was 2020, and I was playing CTF with a friend. There was a reversing challenge that I wanted to solve so badly that I ended up skipping sleep. I didn’t solve it in the end, but I stepped into a whole new world of reversing. After that CTF, I decided to study more for reversing challenges. Up until that point, I was solving mostly web and cryptography challenges on hackthebox and cryptohack. My study plan was to move from category to category, mastering every field. After getting reality-checked by many CTFs, I realized that all categories are hard, and there is no point at which you master one. So, instead of mastering every category, I decided to focus on just one, which I considered the coolest (pwn). Over time, I got rusty at the other ones, but I tell myself it’s okay since I found my passion. Later, I decided to look at real-world vulnerabilities instead of CTF challenges.&lt;/p&gt;

&lt;h1 id=&quot;how-its-going&quot;&gt;How it’s going&lt;/h1&gt;

&lt;p&gt;I gave a talk on Linux Kernel Exploitation at BSidesLjubljana, and I also learned how to write Windows Kernel exploits. This experience opened doors for me to attend multiple major conferences and travel the world. Currently, I’m delving into macOS internals to broaden my expertise.&lt;/p&gt;

&lt;h1 id=&quot;the-projects-that-taught-me-reverse-engineering&quot;&gt;The project(s) that taught me Reverse Engineering&lt;/h1&gt;

&lt;p&gt;In 2021, I embarked on a journey to create my own programming language. I named it OogaBooga, drawing inspiration from the C language syntax. At that point, compilers were a mystery to me. Armed with just pen and paper, I spent hours figuring out implementation details, probably reinventing many things along the way. Assembly language became a close friend during this time. Even though Assembly constituted only about 5% of the project, it significantly deepened my understanding of code abstractions.&lt;/p&gt;

&lt;p&gt;After three weeks of total dedication to the project, a milestone was hit: I got my first “Hello World” program compiled from my language and executed on the CPU. Check out the project here: &lt;a href=&quot;https://github.com/santaclz/OogaBooga&quot;&gt;OogaBooga&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The journey didn’t stop there. Later, along with my college friends, I created a GDB-inspired debugger: &lt;a href=&quot;https://github.com/AlexBrence/FERIdebugger&quot;&gt;FERI debugger&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And when I was exploring heap exploitation, I went ahead and implemented my own heap memory management: &lt;a href=&quot;https://github.com/santaclz/myheap&quot;&gt;myheap&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">How it started</summary></entry></feed>